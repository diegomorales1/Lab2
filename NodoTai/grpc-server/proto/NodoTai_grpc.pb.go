// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: NodoTai.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PrimarioService_Finalizar_FullMethodName      = "/digimon.PrimarioService/Finalizar"
	PrimarioService_SolicitarDatos_FullMethodName = "/digimon.PrimarioService/SolicitarDatos"
)

// PrimarioServiceClient is the client API for PrimarioService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrimarioServiceClient interface {
	Finalizar(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Senal, error)
	SolicitarDatos(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NumeroResponse, error)
}

type primarioServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPrimarioServiceClient(cc grpc.ClientConnInterface) PrimarioServiceClient {
	return &primarioServiceClient{cc}
}

func (c *primarioServiceClient) Finalizar(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Senal, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Senal)
	err := c.cc.Invoke(ctx, PrimarioService_Finalizar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *primarioServiceClient) SolicitarDatos(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NumeroResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NumeroResponse)
	err := c.cc.Invoke(ctx, PrimarioService_SolicitarDatos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrimarioServiceServer is the server API for PrimarioService service.
// All implementations must embed UnimplementedPrimarioServiceServer
// for forward compatibility.
type PrimarioServiceServer interface {
	Finalizar(context.Context, *Empty) (*Senal, error)
	SolicitarDatos(context.Context, *Empty) (*NumeroResponse, error)
	mustEmbedUnimplementedPrimarioServiceServer()
}

// UnimplementedPrimarioServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPrimarioServiceServer struct{}

func (UnimplementedPrimarioServiceServer) Finalizar(context.Context, *Empty) (*Senal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Finalizar not implemented")
}
func (UnimplementedPrimarioServiceServer) SolicitarDatos(context.Context, *Empty) (*NumeroResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolicitarDatos not implemented")
}
func (UnimplementedPrimarioServiceServer) mustEmbedUnimplementedPrimarioServiceServer() {}
func (UnimplementedPrimarioServiceServer) testEmbeddedByValue()                         {}

// UnsafePrimarioServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrimarioServiceServer will
// result in compilation errors.
type UnsafePrimarioServiceServer interface {
	mustEmbedUnimplementedPrimarioServiceServer()
}

func RegisterPrimarioServiceServer(s grpc.ServiceRegistrar, srv PrimarioServiceServer) {
	// If the following call pancis, it indicates UnimplementedPrimarioServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PrimarioService_ServiceDesc, srv)
}

func _PrimarioService_Finalizar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrimarioServiceServer).Finalizar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrimarioService_Finalizar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrimarioServiceServer).Finalizar(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrimarioService_SolicitarDatos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrimarioServiceServer).SolicitarDatos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrimarioService_SolicitarDatos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrimarioServiceServer).SolicitarDatos(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// PrimarioService_ServiceDesc is the grpc.ServiceDesc for PrimarioService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PrimarioService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "digimon.PrimarioService",
	HandlerType: (*PrimarioServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Finalizar",
			Handler:    _PrimarioService_Finalizar_Handler,
		},
		{
			MethodName: "SolicitarDatos",
			Handler:    _PrimarioService_SolicitarDatos_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "NodoTai.proto",
}

const (
	DiaboromonService_EnviarAtaque_FullMethodName = "/digimon.DiaboromonService/EnviarAtaque"
)

// DiaboromonServiceClient is the client API for DiaboromonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiaboromonServiceClient interface {
	EnviarAtaque(ctx context.Context, in *Ataque, opts ...grpc.CallOption) (*Senal, error)
}

type diaboromonServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDiaboromonServiceClient(cc grpc.ClientConnInterface) DiaboromonServiceClient {
	return &diaboromonServiceClient{cc}
}

func (c *diaboromonServiceClient) EnviarAtaque(ctx context.Context, in *Ataque, opts ...grpc.CallOption) (*Senal, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Senal)
	err := c.cc.Invoke(ctx, DiaboromonService_EnviarAtaque_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiaboromonServiceServer is the server API for DiaboromonService service.
// All implementations must embed UnimplementedDiaboromonServiceServer
// for forward compatibility.
type DiaboromonServiceServer interface {
	EnviarAtaque(context.Context, *Ataque) (*Senal, error)
	mustEmbedUnimplementedDiaboromonServiceServer()
}

// UnimplementedDiaboromonServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDiaboromonServiceServer struct{}

func (UnimplementedDiaboromonServiceServer) EnviarAtaque(context.Context, *Ataque) (*Senal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnviarAtaque not implemented")
}
func (UnimplementedDiaboromonServiceServer) mustEmbedUnimplementedDiaboromonServiceServer() {}
func (UnimplementedDiaboromonServiceServer) testEmbeddedByValue()                           {}

// UnsafeDiaboromonServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiaboromonServiceServer will
// result in compilation errors.
type UnsafeDiaboromonServiceServer interface {
	mustEmbedUnimplementedDiaboromonServiceServer()
}

func RegisterDiaboromonServiceServer(s grpc.ServiceRegistrar, srv DiaboromonServiceServer) {
	// If the following call pancis, it indicates UnimplementedDiaboromonServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DiaboromonService_ServiceDesc, srv)
}

func _DiaboromonService_EnviarAtaque_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ataque)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiaboromonServiceServer).EnviarAtaque(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiaboromonService_EnviarAtaque_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiaboromonServiceServer).EnviarAtaque(ctx, req.(*Ataque))
	}
	return interceptor(ctx, in, info, handler)
}

// DiaboromonService_ServiceDesc is the grpc.ServiceDesc for DiaboromonService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DiaboromonService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "digimon.DiaboromonService",
	HandlerType: (*DiaboromonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnviarAtaque",
			Handler:    _DiaboromonService_EnviarAtaque_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "NodoTai.proto",
}
